


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             RESET, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         ;START 
    4 00000000         ; Vector table
    5 00000000 20001000        DCD              0x20001000  ; Stack pointer ini
                                                            tial value
    6 00000004 00000001        DCD              Reset_Handler+1 ; Reset handler
                                                            
    7 00000008 00000001        DCD              NMI_Handler+1 ; NMI handler
    8 0000000C 00000001        DCD              HardFault_Handler+1 ; Hard faul
                                                            t handler
    9 00000010 00000000        DCD              0           ; Reserved
   10 00000014 00000000        DCD              0           ; Reserved
   11 00000018 00000000        DCD              0           ; Reserved
   12 0000001C 00000000        DCD              0           ; Reserved
   13 00000020 00000001        DCD              SVC_Handler+1 ; SVC handler
   14 00000024         
   15 00000024         Reset_Handler
   16 00000024         
   17 00000024 F04F 0002       LDR              R0, =0x2
   18 00000028 4685            MOV              SP, R0      ; Initialize stack 
                                                            pointers again sinc
                                                            e error was comming
                                                            
   19 0000002A         
   20 0000002A F04F 0001       MOV              R0, #1      ; Initialize stack 
                                                            pointers if needed
   21 0000002E F380 8814       MSR              CONTROL, R0 ; Switch to unprivi
                                                            leged mode
   22 00000032         
   23 00000032         ; Load parameters into registers
   24 00000032 F240 6043       LDR              R0, =1603   ; Parameter 1
   25 00000036 F240 6143       LDR              R1, =1603   ; Parameter 2
   26 0000003A         
   27 0000003A         ; Call SVC with number derived from 01603
   28 0000003A DF03            SVC              #3          ; Assuming last 3 d
                                                            igits of 01603. Rea
                                                            son behind the cond
                                                            ition in Q3.1 is 
   29 0000003C         ;because immediate value 0x0000025B (603 in decimal) is 
                       out of range for the SVC 
   30 0000003C         ;instruction, which only permits values in the range 0x0
                       0 to 0xFF (0 to 255 in decimal)
   31 0000003C E7FE    STOP    B                STOP
   32 0000003E         
   33 0000003E         ; NMI handler (example)
   34 0000003E         NMI_Handler
   35 0000003E E7FE            B                NMI_Handler ; Loop indefinitely
                                                            
   36 00000040         
   37 00000040         ; Hard fault handler (example)
   38 00000040         HardFault_Handler
   39 00000040 E7FE            B                HardFault_Handler 
                                                            ; Loop indefinitely
                                                            
   40 00000042         
   41 00000042         
   42 00000042         SVC_Handler
   43 00000042         ; Determine which stack was used



ARM Macro Assembler    Page 2 


   44 00000042 F01E 0F04       TST              LR, #4      ;Test bit 2 of EXC_
                                                            RETURN
   45 00000046 BF0C            ITE              EQ          ;if bit is active. 
                                                            If EQ condition is 
                                                            true, use MSP; othe
                                                            rwise, use PSP
   46 00000048 F3EF 8008       MRSEQ            R0, MSP     ;Moves the value of
                                                             the MSP into R0 if
                                                             the condition is t
                                                            rue (EQ)
   47 0000004C F3EF 8009       MRSNE            R0, PSP     ;Moves the value of
                                                             the PSP into R0 if
                                                             the condition is f
                                                            alse (NE)
   48 00000050         
   49 00000050 6981            LDR              R1, [R0, #24] ; Get the stacked
                                                             PC value. Load sta
                                                            cked PC into R0. th
                                                            e value 24 
   50 00000052         ;is used because it corresponds to the offset in the sta
                       ck frame where the Program 
   51 00000052         ;Counter (PC) value is stored during exception handling
   52 00000052         
   53 00000052 F811 2C02       LDRB             R2, [R1, #-2] ; Get the SVC num
                                                            ber from the instru
                                                            ction. ; Load SVC n
                                                            umber into R1
   54 00000056         
   55 00000056         ; Extract parameters from the stack
   56 00000056 6802            LDR              R2, [R0]    ; First parameter
   57 00000058 6843            LDR              R3, [R0, #4] ; Second parameter
                                                            
   58 0000005A         
   59 0000005A         ; Check if SVC number matches 603
   60 0000005A 2A03            CMP              R2, #3
   61 0000005C D000            BEQ              ADDITION
   62 0000005E E002            B                SUBTRACTION
   63 00000060         
   64 00000060         ADDITION
   65 00000060 441A            ADD              R2, R2, R3  ; R2 = R2 + R3
   66 00000062 6002            STR              R2, [R0, #0] ; Save result to s
                                                            tack
   67 00000064 E002            B                RETURN
   68 00000066         
   69 00000066         SUBTRACTION
   70 00000066 EBA2 0203       SUB              R2, R2, R3  ; R2 = R2 - R3
   71 0000006A 6002            STR              R2, [R0, #0] ; Save result to s
                                                            tack
   72 0000006C         
   73 0000006C         RETURN
   74 0000006C         ; Restore registers and return
   75 0000006C 46F7            MOV              PC, LR
   76 0000006E         
   77 0000006E                 AREA             RESULT, DATA, READWRITE
   78 00000000                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\q3_code.d -o.\objects\q3_code.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\
Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine=



ARM Macro Assembler    Page 3 


"__UVISION_VERSION SETA 526" --predefine="STM32F407xx SETA 1" --list=.\listings
\q3_code.lst Q3_Code.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ADDITION 00000060

Symbol: ADDITION
   Definitions
      At line 64 in file Q3_Code.s
   Uses
      At line 61 in file Q3_Code.s
Comment: ADDITION used once
HardFault_Handler 00000040

Symbol: HardFault_Handler
   Definitions
      At line 38 in file Q3_Code.s
   Uses
      At line 8 in file Q3_Code.s
      At line 39 in file Q3_Code.s

NMI_Handler 0000003E

Symbol: NMI_Handler
   Definitions
      At line 34 in file Q3_Code.s
   Uses
      At line 7 in file Q3_Code.s
      At line 35 in file Q3_Code.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 1 in file Q3_Code.s
   Uses
      None
Comment: RESET unused
RETURN 0000006C

Symbol: RETURN
   Definitions
      At line 73 in file Q3_Code.s
   Uses
      At line 67 in file Q3_Code.s
Comment: RETURN used once
Reset_Handler 00000024

Symbol: Reset_Handler
   Definitions
      At line 15 in file Q3_Code.s
   Uses
      At line 6 in file Q3_Code.s
Comment: Reset_Handler used once
STOP 0000003C

Symbol: STOP
   Definitions
      At line 31 in file Q3_Code.s
   Uses
      At line 31 in file Q3_Code.s
Comment: STOP used once
SUBTRACTION 00000066



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: SUBTRACTION
   Definitions
      At line 69 in file Q3_Code.s
   Uses
      At line 62 in file Q3_Code.s
Comment: SUBTRACTION used once
SVC_Handler 00000042

Symbol: SVC_Handler
   Definitions
      At line 42 in file Q3_Code.s
   Uses
      At line 13 in file Q3_Code.s
Comment: SVC_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESULT 00000000

Symbol: RESULT
   Definitions
      At line 77 in file Q3_Code.s
   Uses
      None
Comment: RESULT unused
1 symbol
344 symbols in table
